// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String   @unique
  username  String   @unique
  tagName   String   @unique
  imageUrl  String?  @default("")
  avatarUrl String?  @default("")
  bio       String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  comments              Comment[]
  shares                Share[]
  sentMessages          Message[]      @relation("SentMessages")
  receivedMessages      Message[]      @relation("ReceivedMessages")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  createdNotifications  Notification[] @relation("NotificationCreator")
  followers             Follow[]       @relation("following")
  following             Follow[]       @relation("follower")
  likes                 Like[]

  @@index([clerkId])
  @@index([email])
  @@index([tagName])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  images    String[] // 圖片 URLs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false) // 標記是否已刪除
  isRoot    Boolean  @default(false) // 是否為頂層貼文（原 Post）

  // 關聯
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // 留言的子留言關係通過 CommentClosure 表來管理
  ancestors   CommentClosure[] @relation("descendant")
  descendants CommentClosure[] @relation("ancestor")

  // 互動
  likes        Like[]
  shares       Share[]
  Notification Notification[]

  @@index([authorId])
  @@index([isRoot]) // 用於快速查詢頂層貼文
}

model Share {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // 關聯
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@index([commentId])
  @@index([userId])
}

// 新增的Closure Table模型
model CommentClosure {
  id           String @id @default(uuid())
  ancestorId   String
  descendantId String
  depth        Int // 表示兩個節點之間的距離，0表示自身

  // 關聯
  ancestor   Comment @relation("ancestor", fields: [ancestorId], references: [id], onDelete: Cascade)
  descendant Comment @relation("descendant", fields: [descendantId], references: [id], onDelete: Cascade)

  @@unique([ancestorId, descendantId]) // 確保每對祖先-後代關係只存在一次
  @@index([ancestorId])
  @@index([descendantId])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  images     String[] // 圖片 URLs
  // 關聯
  senderId   String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType // 'LIKE' | 'SHARE' | 'FOLLOW' | 'MESSAGE' | 'COMMENT' | 'TAG'
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  commentId String?
  creatorId String
  // 關聯
  userId    String
  user      User             @relation("NotificationReceiver", fields: [userId], references: [id])
  creator   User             @relation("NotificationCreator", fields: [creatorId], references: [id])
  comment   Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // 關聯
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // 確保每個用戶只能追蹤另一個用戶一次
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // 關聯
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId]) // 確保每個用戶對每個評論只能按讚一次
  @@index([commentId])
  @@index([userId])
}

enum NotificationType {
  LIKE
  SHARE
  FOLLOW
  MESSAGE
  COMMENT
  TAG // 新增標記通知類型
}
